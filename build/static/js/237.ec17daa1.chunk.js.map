{"version":3,"file":"static/js/237.ec17daa1.chunk.js","mappings":"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","sources":["components/Forms/BinanceForm/index.js","components/Modals/BinanceActivation.js","components/CreateGroupSidebar/index.js","components/Select/index.js","components/Modals/RemoveGroup.js","components/Modals/RaspustitModal.js","components/TraiderComponents/TraiderGroup/index.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n//Form\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n//Field\r\nimport Field from \"@components/Field\";\r\n\r\n//Components\r\nimport Button from \"@components/Button\";\r\nimport SpinnerLoad from \"@components/SpinnerLoad\";\r\nimport Select from \"@components/Select\";\r\n\r\n//Styles\r\nimport \"../Forms.scss\";\r\n\r\nconst BinanceForm = ({ fetchData }) => {\r\n    const [valute, setValute] = useState(\"USD\");\r\n    const [loaded, setLoaded] = useState(true);\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        setValue,\r\n    } = useForm();\r\n\r\n    const onChangeHandler = (ev) => {\r\n        setValue(ev.currentTarget.name, ev.currentTarget.value);\r\n    };\r\n\r\n    const onSubmitHandler = async (data) => {\r\n        setLoaded(false);\r\n\r\n        fetchData(data);\r\n\r\n        setLoaded(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"form\">\r\n            <form\r\n                onSubmit={handleSubmit(onSubmitHandler)}\r\n                noValidate\r\n                autoComplete=\"off\"\r\n            >\r\n                <Field\r\n                    label=\"Binance api key\"\r\n                    {...register(\"binance_api_key\", {\r\n                        required: true,\r\n                        minLength: 2,\r\n                        maxLength: 50,\r\n                    })}\r\n                    onChange={onChangeHandler}\r\n                />\r\n                <Field\r\n                    label=\"Binance secret key\"\r\n                    {...register(\"binance_secret_key\", {\r\n                        required: true,\r\n                        minLength: 2,\r\n                        maxLength: 50,\r\n                    })}\r\n                    onChange={onChangeHandler}\r\n                />\r\n                <Button\r\n                    className=\"form__button\"\r\n                    theme={\"beforesubmit\"}\r\n                    type=\"submit\"\r\n                >\r\n                    {!loaded ? <SpinnerLoad /> : <span>Подключить</span>}\r\n                </Button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BinanceForm;\r\n","import React from \"react\";\r\n\r\n//Components\r\nimport Button from \"@components/Button\";\r\nimport Checkbox from \"../Checkbox\";\r\n\r\n//Styles\r\nimport \"./Modal.scss\";\r\nimport BinanceForm from \"../Forms/BinanceForm\";\r\n\r\nconst BinanceActivation = ({ handleChange }) => {\r\n    const fetchData = (e) => {\r\n        handleChange(e);\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal\">\r\n            <div className=\"modal__block\">\r\n                <div className=\"modal__block__title\">\r\n                    <span>Введите Binance ключи!</span>\r\n                </div>\r\n                <div className=\"modal__block__content\">\r\n                    <BinanceForm fetchData={fetchData} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BinanceActivation;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\n//Components\r\nimport MenuToggle from \"@components/MenuToggle\";\r\nimport Select from \"@components/Select\";\r\nimport Field from \"@components/Field\";\r\nimport Button from \"@components/Button\";\r\n\r\n//Styles\r\nimport \"./CreateGroupSidebar.scss\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Calendar } from \"react-calendar\";\r\nimport { createGroup } from \"../../store/group/group.api\";\r\nimport BinanceActivation from \"../Modals/BinanceActivation\";\r\nimport { binanceApiActive } from \"../../store/user/user.api\";\r\nimport SpinnerLoad from \"../SpinnerLoad\";\r\nimport MessageBox from \"../MessageBox\";\r\n\r\nconst CreateGroupSidebar = ({ isOpen, toggle }) => {\r\n    const dispatch = useDispatch();\r\n    const [dateTwoShow, setDateTwoShow] = useState(false);\r\n    const [dateOneShow, setDateOneShow] = useState(false);\r\n    const [dateOne, setDateOne] = useState(null);\r\n    const [dateTwo, setDateTwo] = useState(null);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [active_binance, set_active_binance] = useState(false);\r\n    const [select, setSelect] = useState(\"\");\r\n    const { message } = useSelector((state) => state.group);\r\n    const { complete } = useSelector((state) => state.user);\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        setValue,\r\n    } = useForm();\r\n\r\n    useEffect(() => {\r\n        message?.message?.forEach((e) => {\r\n            if (e === \"Необходимо указать binance api ключи\") {\r\n                set_active_binance(true);\r\n            }\r\n        });\r\n\r\n        if (complete === \"Вы успешно стали трейдером\") {\r\n            set_active_binance(false);\r\n        }\r\n    }, [message, complete]);\r\n\r\n    const binanceActivation = (data) => {\r\n        dispatch(binanceApiActive(data));\r\n    };\r\n\r\n    const onChangeHandler = (ev) => {\r\n        setValue(ev.currentTarget.name, ev.currentTarget.value);\r\n    };\r\n\r\n    const setDateTwoToggle = () => {\r\n        setDateTwoShow(true);\r\n        setDateOneShow(false);\r\n    };\r\n\r\n    const setDateOneToggle = () => {\r\n        setDateTwoShow(false);\r\n        setDateOneShow(true);\r\n    };\r\n\r\n    const onSubmitHandler = async (data) => {\r\n        setLoaded(true);\r\n\r\n        if (select && dateOne && dateTwo) {\r\n            const obj = {\r\n                ...data,\r\n                start_date: new Date(dateOne).toISOString(),\r\n                end_date: new Date(dateTwo).toISOString(),\r\n            };\r\n            dispatch(createGroup(obj));\r\n        }\r\n\r\n        setLoaded(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        let d = document.querySelector(\".react-calendar__month-view__days\");\r\n        d?.addEventListener(\"click\", (e) => {\r\n            setTimeout(() => {\r\n                setDateTwoShow(false);\r\n                setDateOneShow(false);\r\n            }, 0.5);\r\n        });\r\n    }, [dateOneShow, dateTwoShow]);\r\n\r\n    return (\r\n        <div className=\"create_group\">\r\n            <div className=\"create_group__sidebar\">\r\n                <div className=\"create_group__sidebar__title\">\r\n                    <div\r\n                        className=\"create_group__sidebar__back\"\r\n                        onClick={() => toggle(false)}\r\n                    ></div>\r\n                    <span>Создать группу</span>\r\n                    <MenuToggle isOpen={true} toggle={toggle} />\r\n                </div>\r\n                <form\r\n                    onSubmit={handleSubmit(onSubmitHandler)}\r\n                    className=\"create_group__sidebar__content\"\r\n                >\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            gap: \"8px\",\r\n                        }}\r\n                    >\r\n                        <span className=\"f12\">Цель создания группы</span>\r\n                        <Select\r\n                            defaultOption=\"Трейдинг\"\r\n                            onChange={(e) => setSelect(e)}\r\n                        >\r\n                            <li>Трейдинг</li>\r\n                            <li>ICO</li>\r\n                            <li>Другое</li>\r\n                        </Select>\r\n                    </div>\r\n                    <Field\r\n                        label=\"Название группы\"\r\n                        {...register(\"title\", {\r\n                            required: true,\r\n                            minLength: 2,\r\n                            maxLength: 150,\r\n                        })}\r\n                        onChange={onChangeHandler}\r\n                        error={errors.title && \"Заполните поле\"}\r\n                    />\r\n                    <Field\r\n                        area={true}\r\n                        label=\"Описание группы\"\r\n                        {...register(\"description\", {\r\n                            required: true,\r\n                            minLength: 2,\r\n                            maxLength: 500,\r\n                        })}\r\n                        onChange={onChangeHandler}\r\n                        error={errors.description && \"Заполните поле\"}\r\n                    />\r\n                    <Field\r\n                        label=\"Количество людей в группе\"\r\n                        {...register(\"group_size\", {\r\n                            required: true,\r\n                            minLength: 1,\r\n                            maxLength: 2,\r\n                        })}\r\n                        type=\"user_count\"\r\n                        onChange={onChangeHandler}\r\n                        error={errors.group_size && \"Заполните поле\"}\r\n                    />\r\n                    <Field\r\n                        label=\"Процент начисления\"\r\n                        {...register(\"percent_from_income\", {\r\n                            required: true,\r\n                            minLength: 1,\r\n                            maxLength: 2,\r\n                        })}\r\n                        type=\"number\"\r\n                        onChange={onChangeHandler}\r\n                        error={errors.group_size && \"Заполните поле\"}\r\n                    />\r\n                    <Field\r\n                        label=\"Необходимая сумма\"\r\n                        {...register(\"need_sum\", {\r\n                            required: true,\r\n                            minLength: 1,\r\n                            maxLength: 5,\r\n                        })}\r\n                        type=\"money\"\r\n                        onChange={onChangeHandler}\r\n                        error={errors.need_sum && \"Заполните поле\"}\r\n                    />\r\n                    <div className=\"create_group__sidebar__content__sum\">\r\n                        <Field\r\n                            label=\"Минимальная сумма входа\"\r\n                            {...register(\"min_entry_sum\", {\r\n                                required: true,\r\n                                minLength: 2,\r\n                                maxLength: 5,\r\n                            })}\r\n                            type=\"money\"\r\n                            onChange={onChangeHandler}\r\n                            error={errors.min_entry_sum && \"Заполните поле\"}\r\n                        />\r\n                        <Field\r\n                            label=\"Максимальная сумма входа\"\r\n                            {...register(\"max_entry_sum\", {\r\n                                required: true,\r\n                                minLength: 2,\r\n                                maxLength: 5,\r\n                            })}\r\n                            type=\"money\"\r\n                            onChange={onChangeHandler}\r\n                            error={errors.max_entry_sum && \"Заполните поле\"}\r\n                        />\r\n                    </div>\r\n                    <div className=\"birthday\">\r\n                        <Field\r\n                            label=\"Дата начала\"\r\n                            placeholder=\"-- / -- / ----\"\r\n                            name=\"birth_day\"\r\n                            onFocus={setDateOneToggle}\r\n                            type=\"date\"\r\n                            value={\r\n                                dateOne\r\n                                    ? new Date(dateOne).toLocaleDateString()\r\n                                    : \"\"\r\n                            }\r\n                            error={\r\n                                !dateOne && errors.birthDay && \"Заполните поле\"\r\n                            }\r\n                        />\r\n                        {dateOneShow ? (\r\n                            <Calendar\r\n                                className=\"calendar_one\"\r\n                                onChange={(e) => {\r\n                                    setDateOne(e);\r\n                                    console.log(e);\r\n                                }}\r\n                                value={dateOne}\r\n                            />\r\n                        ) : null}\r\n                    </div>\r\n                    <div className=\"birthday\">\r\n                        <Field\r\n                            label=\"Дата конца\"\r\n                            placeholder=\"-- / -- / ----\"\r\n                            name=\"birth_day\"\r\n                            onFocus={setDateTwoToggle}\r\n                            type=\"date\"\r\n                            value={\r\n                                dateOne\r\n                                    ? new Date(dateTwo).toLocaleDateString()\r\n                                    : \"\"\r\n                            }\r\n                            error={\r\n                                !dateTwo && errors.birthDay && \"Заполните поле\"\r\n                            }\r\n                        />\r\n                        {dateTwoShow ? (\r\n                            <Calendar\r\n                                className=\"calendar_one\"\r\n                                onChange={(e) => {\r\n                                    setDateTwo(e);\r\n                                }}\r\n                                value={dateOne}\r\n                            />\r\n                        ) : null}\r\n                    </div>\r\n                    <Button\r\n                        theme=\"beforesubmit\"\r\n                        type=\"submit\"\r\n                        disabled={loaded}\r\n                    >\r\n                        {!loaded ? \"Создать группу\" : <SpinnerLoad />}\r\n                    </Button>\r\n                </form>\r\n                {active_binance && (\r\n                    <BinanceActivation handleChange={binanceActivation} />\r\n                )}\r\n                {complete ? (\r\n                    <MessageBox message={complete} error={false} />\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateGroupSidebar;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n//Icons\r\nimport arrow from \"@assets/img/selectArrow.svg\";\r\n\r\n//Styles\r\nimport \"./Select.scss\";\r\n\r\nconst Select = ({ children, className, defaultOption, onChange }) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [select, setSelect] = useState(defaultOption);\r\n\r\n    document.addEventListener(\"click\", (e) => {\r\n        if (e.target.localName === \"li\") {\r\n            setSelect(e.target.innerText);\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        onChange && onChange(select);\r\n    }, [select]);\r\n\r\n    const toggleSelect = () => {\r\n        setOpen(!open);\r\n    };\r\n\r\n    return (\r\n        <div className={`select ${className}`} onClick={toggleSelect}>\r\n            <span>{select}</span>\r\n            {open && <ul className=\"select__list\">{children}</ul>}\r\n            <img src={arrow} alt=\"arrow\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;\r\n","import React from \"react\";\r\n\r\n//Components\r\nimport Button from \"@components/Button\";\r\nimport Field from \"@components/Field\";\r\n\r\n//Styles\r\nimport \"./Modal.scss\";\r\n\r\nconst RemoveGroup = ({ handleChange }) => {\r\n    const hadnleClick = (toggle) => {\r\n        handleChange(toggle);\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal\">\r\n            <div className=\"modal__block\">\r\n                <div className=\"modal__block__title\">\r\n                    <span>Удалить группу?</span>\r\n                </div>\r\n                <div className=\"modal__block__desc\">\r\n                    <span>\r\n                        При удалении группы средства вернутся обратно инвесторам\r\n                    </span>\r\n                </div>\r\n                <div className=\"modal__block__btns\">\r\n                    <Button\r\n                        className=\"modal__block__btns__button\"\r\n                        theme=\"danger\"\r\n                        onClick={() => hadnleClick(\"remove\")}\r\n                    >\r\n                        Удалить\r\n                    </Button>\r\n                    <Button\r\n                        className=\"modal__block__btns__button\"\r\n                        theme=\"beforesubmit\"\r\n                        onClick={() => hadnleClick(\"cancel\")}\r\n                    >\r\n                        Не удалять\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RemoveGroup;\r\n","import React from \"react\";\r\n\r\n//Components\r\nimport Button from \"@components/Button\";\r\nimport Field from \"@components/Field\";\r\n\r\n//Styles\r\nimport \"./Modal.scss\";\r\n\r\nconst RaspustitModal = ({ handleChange }) => {\r\n    const hadnleClick = (toggle) => {\r\n        handleChange(toggle);\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal\">\r\n            <div className=\"modal__block\">\r\n                <div className=\"modal__block__title\">\r\n                    <span>Вы точно хотите распустить группу?</span>\r\n                </div>\r\n                {/* <div className=\"modal__block__desc\">\r\n                    <span>\r\n                        \r\n                    </span>\r\n                </div> */}\r\n                <div className=\"modal__block__btns\">\r\n                    <Button\r\n                        className=\"modal__block__btns__button\"\r\n                        theme=\"danger\"\r\n                        onClick={() => hadnleClick(\"raspus\")}\r\n                    >\r\n                        Распустить\r\n                    </Button>\r\n                    <Button\r\n                        className=\"modal__block__btns__button\"\r\n                        theme=\"beforesubmit\"\r\n                        onClick={() => hadnleClick(\"cancel\")}\r\n                    >\r\n                        Отменить\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RaspustitModal;\r\n","import React, { useState } from \"react\";\r\n\r\n//Components\r\nimport CardInfo from \"@components/CardInfo\";\r\nimport Button from \"@components/Button\";\r\nimport ProgressBar from \"@components/ProgressBar\";\r\nimport { useNavigate } from \"react-router\";\r\nimport router from \"../../../utils/router\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport RemoveGroup from \"../../Modals/RemoveGroup\";\r\nimport { Link } from \"react-router-dom\";\r\nimport RaspustitModal from \"../../Modals/RaspustitModal\";\r\nimport { deleteGroup } from \"../../../store/group/group.api\";\r\n\r\nconst TraiderGroup = ({ e, className }) => {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const [readMore, setReadMore] = useState(true);\r\n    const [remove, setRemove] = useState(false);\r\n    const [raspus, setRaspus] = useState(false);\r\n\r\n    const { isTraider } = useSelector((state) => state.user);\r\n\r\n    const handleClick = () => {\r\n        if (isTraider) {\r\n            navigate(`${router.groups}/${e.id}`);\r\n        }\r\n    };\r\n\r\n    const handleGroup = (t) => {\r\n        if (t === \"remove\") {\r\n            dispatch(deleteGroup(e.id));\r\n            setRemove(false);\r\n        } else {\r\n            setRemove(false);\r\n        }\r\n    };\r\n\r\n    const handleRaspus = (e) => {\r\n        if (e === \"raspus\") {\r\n            setRaspus(false);\r\n        } else {\r\n            setRaspus(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        e && (\r\n            <CardInfo\r\n                className={className}\r\n                name={`${e?.first_name} ${e?.last_name}`}\r\n                email={e.email}\r\n                rating={e.rating}\r\n                onClick={handleClick}\r\n                logo=\"https://cdn.dribbble.com/users/24078/screenshots/15522433/media/e92e58ec9d338a234945ae3d3ffd5be3.jpg?compress=1&resize=400x300\"\r\n            >\r\n                <div className={`${className}__title cardinfo__content__title`}>\r\n                    <span>{e.title || \"Название группы\"}</span>\r\n                </div>\r\n                <div\r\n                    className={`main__group_content__card__desc ${\r\n                        readMore && \"active\"\r\n                    }`}\r\n                >\r\n                    <p>{e.description}</p>\r\n                </div>\r\n                {e?.description?.length > 30 && (\r\n                    <Button onClick={() => setReadMore(!readMore)}>\r\n                        ПОКАЗАТЬ ВСЕ\r\n                    </Button>\r\n                )}\r\n                <div className={`${className}__linebar`}>\r\n                    <ProgressBar\r\n                        completed={(e.amount_collected / e.need_sum) * 100}\r\n                        from={e?.amount_collected}\r\n                        to={e?.need_sum}\r\n                        start={e?.start_date}\r\n                        end={e?.end_date}\r\n                    />\r\n                </div>\r\n                {e?.investors && !e?.investors.length ? (\r\n                    <div style={{ display: \"flex\", gap: \"16px\" }}>\r\n                        <Button\r\n                            onClick={() => setRemove(true)}\r\n                            theme={\"danger\"}\r\n                        >\r\n                            Удалить\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => navigate(`${router.groups}/${e.id}`)}\r\n                            theme={\"aftersubmit\"}\r\n                        >\r\n                            Подробнее\r\n                        </Button>\r\n                    </div>\r\n                ) : e?.investors && e?.investors.length ? (\r\n                    <div style={{ display: \"flex\", gap: \"16px\" }}>\r\n                        <Button\r\n                            onClick={() => setRemove(true)}\r\n                            theme={\"aftersubmit\"}\r\n                        >\r\n                            Распустить\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => navigate(`${router.groups}/${e.id}`)}\r\n                            theme={\"aftersubmit\"}\r\n                        >\r\n                            Подробнее\r\n                        </Button>\r\n                    </div>\r\n                ) : null}\r\n\r\n                {remove ? <RemoveGroup handleChange={handleGroup} /> : null}\r\n                {raspus ? <RaspustitModal handleChange={handleRaspus} /> : null}\r\n            </CardInfo>\r\n        )\r\n    );\r\n};\r\n\r\nexport default TraiderGroup;\r\n"],"names":["fetchData","useState","loaded","setLoaded","useForm","register","handleSubmit","setValue","formState","errors","onChangeHandler","ev","currentTarget","name","value","onSubmitHandler","data","className","onSubmit","noValidate","autoComplete","Field","label","required","minLength","maxLength","onChange","Button","theme","type","SpinnerLoad","handleChange","e","isOpen","toggle","dispatch","useDispatch","dateTwoShow","setDateTwoShow","dateOneShow","setDateOneShow","dateOne","setDateOne","dateTwo","setDateTwo","active_binance","set_active_binance","select","setSelect","message","useSelector","state","group","complete","user","useEffect","forEach","obj","start_date","Date","toISOString","end_date","createGroup","d","document","querySelector","addEventListener","setTimeout","onClick","MenuToggle","style","display","flexDirection","gap","Select","defaultOption","error","title","area","description","group_size","need_sum","min_entry_sum","max_entry_sum","placeholder","onFocus","toLocaleDateString","birthDay","console","log","disabled","binanceApiActive","MessageBox","children","open","setOpen","target","localName","innerText","src","arrow","alt","hadnleClick","navigate","useNavigate","readMore","setReadMore","remove","setRemove","raspus","setRaspus","isTraider","CardInfo","first_name","last_name","email","rating","router","id","logo","length","ProgressBar","completed","amount_collected","from","to","start","end","investors","t","deleteGroup"],"sourceRoot":""}